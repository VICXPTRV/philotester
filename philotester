#!/bin/bash

source config
source utils/measure_delay.sh
source utils/check_integers.sh
source utils/style.sh
source utils/printers.sh

# PATH
EXEC="${EXEC_PATH}/philo"
CASES_PATH="cases/"
LOGS_PATH="logs"
if [[ ! -d "logs" ]]; then
	mkdir logs
else
	rm logs/*
fi

# VALGRIND
VALG_PATH="valgrind"
[[ ! -d "${VALG_PATH}" ]] && mkdir ${VALG_PATH}
[[ ! -f "${VALG_PATH}/valgrind.log" ]] && touch ${VALG_PATH}/valgrind.log
[[ ! -f "${VALG_PATH}/valgrind.supp" ]] && touch "${VALG_PATH}/valgrind.supp"
VALG_LOG=${VALG_PATH}/valgrind.log
VALG_SUP=${VALG_PATH}/valgrind.supp
VALGRIND="valgrind $VALGRIND_FLAGS --log-file=$VALG_LOG"
> "$VALG_LOG"

# FLAGS
flag_valgrind=false
while getopts "v" flag; do
	case $flag in
		v) flag_valgrind=true ;;
	esac
done
shift $((OPTIND - 1))

# CASES
if [[ $# -gt 0 ]]; then
	cases=("$@")
else
	cases=($(ls $CASES_PATH)); fi

# GLOBALS
TOTAL=0
FAILED=0
EXEC_MSG=""
TEST_MSG=""
declare -A table

# NORM (optional)
check_norm() {
	echo -e "${HEADER_EMOJI}${HEADER_COLOR} Testing: build and norm${RESET}"
	make -C "$EXEC_PATH" fclean > /dev/null 2>&1
	norminette $EXEC_PATH > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		echo -e "${OK_COLOR}${OK} Norminette ok${RESET}"
	else
		echo -e "${KO_COLOR}${KO} Norminette failed...${RESET}"
	fi
}

# BUILD
build_program() {

	BUILD_FAIL=$(make -C "$EXEC_PATH" re > /dev/null 2>&1)
	if [[ $? -eq 0 ]]; then
		echo -e "${OK_COLOR} ${OK} Build sucessfully\n${RESET}"
	else
		echo -e "${KO_COLOR}${KO} Build failed..${RESET}"
		echo "$BUILD_FAIL"
		exit 1
	fi
}

# RUN
run_cases() {
	for case in ${cases[@]}; do
		echo -e "${HEADER_EMOJI}${HEADER_COLOR} Testing: ${case}${RESET}"
		run_tests "${case}"
		echo -e "\n"
	done
}

run_tests() {
    case="$1"
    test_file="${CASES_PATH}/${case}"  # Correct path to the test file
    test_number=1  # test_number for log files

    # Check if the test file exists
    if [[ ! -f "$test_file" ]]; then
        echo -e "${KO_COLOR}$ Test file not found: ${test_file}${RESET}"
        return
    fi

    while IFS= read -r test_case; do
        [[ -z "$test_case" ]] && continue

        log_file="${LOGS_PATH}/${case}_${test_number}.log"
		LEAK_RES=""

		# RUN PROGRAMM
        if $flag_valgrind; then
			output=$($VALGRIND $EXEC $test_case 2>&1)
			if grep -q "definitely lost:" "$VALG_LOG"; then
				LEAK_RES=$LEAK; fi
        else
            output=$($EXEC $test_case 2>&1)
        fi

		extract_output "$output" "$log_file" "$test_case"
		validate_output
		for philo in "${!table[@]}"; do
			echo -e "${table[$philo]}"
		done
		unset table
        ((TOTAL++))
		((test_number++))
    done < "$test_file"
}

extract_output() {
	output="$1"
    log_file="$2"
	test_case="$3"

	# Log the output
	echo "$output" > "$log_file"

	# Get program input
	number_of_philos=$(echo "$test_case" | cut -d " " -f 1)
	t_die="$(echo "$test_case" | cut -d " " -f 2)"
	t_eat="$(echo "$test_case" | cut -d " " -f 3)"
	t_sleep="$(echo "$test_case" | cut -d " " -f 4)"
	meals_to_eat="$(echo "$test_case" | cut -d " " -f 5)"

	if is_int_overflow "$number_of_philos" "$t_die" "$t_eat" "$t_sleep" "$meals_to_eat" || is_int_negative_or_zero "$number_of_philos" "$t_die" "$t_eat" "$t_sleep" "$meals_to_eat"; then
		EXEC_MSG=$(<"$log_file")
		return
	fi


	# Get table with logs of each philo
	declare -gA table
	for ((philo=1; philo <= number_of_philos; philo++)); do
		table["$philo"]=""
	done
	while IFS=" " read -r first second rest; do
		TEST_MSG=""
		if echo "$first $second $rest" | grep -q "segmentation"; then
			TEST_MSG="Segmentation fault"
			break
		elif [[ "$first" =~ ^[0-9]+$ && "$second" =~ ^[0-9]+$ ]]; then
			time="$first"
			philo="$second"
			action="$rest"
			fill_table "$time" "$philo" "$action" table "$number_of_philos"
		else
			TEST_MSG="Unexpected output"
			break
    	fi
	done < "$log_file"
}

fill_table() {
	time="$1"
	philo="$2"
	action="$3"
	max="$5"
	declare -n table_ref="$4"

	if [[ "$philo" -lt 1 || "$philo" -gt "$max" ]]; then
		echo -e "${KO_COLOR}${KO} Invalid philosopher number: $philo${RESET} max: $max"
        return
    fi
    table_ref["$philo"]+="[$time] $action, "

}

validate_output() {
		echo -e "${KO_COLOR}[$test_number]${LEAK_RES}./philo ${test_case} ${EXEC_MSG}${RESET}"
		echo -e "${ADD_COLOR}  Deaths   : $actual_deaths (actual) vs $expected_deaths (expected)"
		echo "  Meals    : $actual_meals (actual) vs $expected_meals (expected)"
		echo "  Sleeps   : $actual_sleeps (actual) vs $expected_sleeps (expected)"
		echo -e "  Thinks   : $actual_thinks (actual) vs $expected_thinks (expected)${RESET}"

		# if [[ "$actual_deaths" -le "$expected_deaths" \
		# 	&& "$actual_meals" -eq "$expected_meals" \
		# 	&& "$actual_sleeps" -eq "$expected_sleeps" \
		# 	&& "$actual_thinks" -eq "$expected_thinks" ]]; then
        #     echo -e "${OK_COLOR}[$test_number]${LEAK_RES}${WHITE}./philo ${test_case}${RESET}"
        # else
        #     echo -e "${KO_COLOR}[$test_number]${LEAK_RES}./philo ${test_case}${RESET} Output: ${EXEC_MSG}"
        #     echo -e "${GREY}  Deaths   : $actual_deaths (actual) vs $expected_deaths (expected)"
        #     echo "  Meals    : $actual_meals (actual) vs $expected_meals (expected)"
        #     echo "  Sleeps   : $actual_sleeps (actual) vs $expected_sleeps (expected)"
        #     echo -e "  Thinks   : $actual_thinks (actual) vs $expected_thinks (expected)${RESET}"
        #     ((FAILED++))
        # fi
}

# RUN SCRIPT
print_header
measure_system_delay
check_norm
build_program
run_cases
print_result